# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'P_22_1_UI.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import sqlite3 as sq


class Ui_MainWindow(QtWidgets.QMainWindow):

    encode = "utf-8"
    
    conn = ""
    cmd = ""
    
    sql_lines = []
    table = []

    t_name = ""

    header = []

    nrow = 0
    ncol = 0
    
    def setupUi(self, MainWindow):
        
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(972, 752)
        
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        
        self.tbl__view = QtWidgets.QTableWidget(self.centralwidget)
        self.tbl__view.setGeometry(QtCore.QRect(10, 10, 821, 571))
        font = QtGui.QFont()
        font.setPointSize(15)
        self.tbl__view.setFont(font)
        self.tbl__view.setGridStyle(QtCore.Qt.DotLine)
        self.tbl__view.setObjectName("tbl__view")

        self.lst__view = QtWidgets.QListWidget(self.centralwidget)
        self.lst__view.setGeometry(QtCore.QRect(840, 10, 121, 571))
        self.lst__view.setObjectName("lst__view")
        
        self.btn__enter = QtWidgets.QPushButton(self.centralwidget)
        self.btn__enter.setGeometry(QtCore.QRect(840, 590, 121, 51))
        font = QtGui.QFont()
        font.setFamily("맑은 고딕")
        font.setPointSize(12)
        self.btn__enter.setFont(font)
        self.btn__enter.setObjectName("btn__enter")
        
        self.txt__sql = QtWidgets.QLineEdit(self.centralwidget)
        self.txt__sql.setGeometry(QtCore.QRect(10, 590, 821, 111))
        font = QtGui.QFont()
        font.setFamily("맑은 고딕")
        font.setPointSize(20)
        font.setBold(True)
        font.setWeight(75)
        self.txt__sql.setFont(font)
        self.txt__sql.setAlignment(QtCore.Qt.AlignCenter)
        self.txt__sql.setObjectName("txt__sql")
        
        self.btn__reset = QtWidgets.QPushButton(self.centralwidget)
        self.btn__reset.setGeometry(QtCore.QRect(840, 650, 121, 51))
        font = QtGui.QFont()
        font.setFamily("맑은 고딕")
        font.setPointSize(12)
        self.btn__reset.setFont(font)
        self.btn__reset.setObjectName("btn__reset")
        
        MainWindow.setCentralWidget(self.centralwidget)
        self.m__bar = QtWidgets.QMenuBar(MainWindow)
        self.m__bar.setGeometry(QtCore.QRect(0, 0, 972, 21))
        self.m__bar.setObjectName("m__bar")
        MainWindow.setMenuBar(self.m__bar)
        
        self.m__file = QtWidgets.QMenu(self.m__bar)
        self.m__file.setObjectName("m__file")
        
        self.m__db = QtWidgets.QMenu(self.m__file)
        self.m__db.setObjectName("m__db")
        self.m__sql = QtWidgets.QMenu(self.m__file)
        self.m__sql.setObjectName("m__sql")
        
        self.m__option = QtWidgets.QMenu(self.m__bar)
        self.m__option.setObjectName("m__option")
        

        self.s__bar = QtWidgets.QStatusBar(MainWindow)
        self.s__bar.setObjectName("s__bar")
        MainWindow.setStatusBar(self.s__bar)
        
        self.db__open = QtWidgets.QAction(MainWindow)
        self.db__open.setObjectName("db__open")
        
        self.db__save = QtWidgets.QAction(MainWindow)
        self.db__save.setObjectName("db__save")
        
        self.sql__open = QtWidgets.QAction(MainWindow)
        self.sql__open.setObjectName("sql__open")
        
        self.sql__save = QtWidgets.QAction(MainWindow)
        self.sql__save.setObjectName("sql__save")
        
        self.o__utf = QtWidgets.QAction(MainWindow)
        self.o__utf.setObjectName("o__utf")
        
        self.o__ansi = QtWidgets.QAction(MainWindow)
        self.o__ansi.setObjectName("o__ansi")
        
        self.m__db.addAction(self.db__open)
        self.m__db.addAction(self.db__save)
        self.m__sql.addAction(self.sql__open)
        self.m__sql.addAction(self.sql__save)
        
        self.m__option.addAction(self.o__utf)
        self.m__option.addAction(self.o__ansi)
        
        self.m__file.addAction(self.m__db.menuAction())
        self.m__file.addAction(self.m__sql.menuAction())
        
        self.m__bar.addAction(self.m__file.menuAction())
        self.m__bar.addAction(self.m__option.menuAction())

        self.o__utf.triggered.connect(self.encoding_utf)
        self.o__ansi.triggered.connect(self.encoding_ansi)

        self.txt__sql.returnPressed.connect(self.enter)
        self.btn__enter.clicked.connect(self.enter)

        self.lst__view.clicked.connect(self.load)

        self.db__open.triggered.connect(self.db_open)
        self.db__save.triggered.connect(self.db_save)

        self.sql__open.triggered.connect(self.sql_open)
        self.sql__save.triggered.connect(self.sql_save)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def load(self):

        self.t_name = self.lst__view.currentItem().text()

        line = f"select * from {self.t_name}"
    
        self.sql_lines.append(line)
        self.cmd.execute(line)
        
        self.table = self.cmd.fetchall()

        self.nrow = len(self.table)
        self.ncol = len(self.table[0])

        self.tbl__view.setRowCount(self.nrow)
        self.tbl__view.setColumnCount(self.ncol)

        self.cmd.execute(f"select * from PRAGMA_table_info('{self.t_name}')")
        names = self.cmd.fetchall()

        col = [0] * self.ncol

        for i in range(self.ncol): col[i] = str(names[i][1]).upper()

        self.tbl__view.setHorizontalHeaderLabels(col)
        self.header = col

        for i in range(self.nrow):                
            for j in range(self.ncol):
                self.tbl__view.setItem(i, j, QtWidgets.QTableWidgetItem(str(self.table[i][j])))

    def encoding_utf(self):

        self.encode = "utf-8"
        self.o__utf.setChecked(True)
        self.o__ansi.setChecked(False)

        self.s__bar.showMessage("Now Encoding Type => UTF-8")
        
    def encoding_ansi(self):

        self.encode = "cp949"
        self.o__utf.setChecked(False)
        self.o__ansi.setChecked(True)

        self.s__bar.showMessage("Now Encoding Type => ANSI")

    def path_selector(self):

        path = QtWidgets.QFileDialog.getOpenFileName(self, "Select File...", "./", 'Database (*.db);; All File(*)')

        return path[0]
    
    def db_open(self):

        path = self.path_selector()

        self.conn = sq.connect(path, isolation_level= None)
        self.cmd = self.conn.cursor()

        self.cmd.execute("SELECT name FROM sqlite_master WHERE type='table'")
        temp = self.cmd.fetchall()

        for i in range(len(temp)):

            if temp[i][0] != 'sqlite_sequence': self.lst__view.addItem(temp[i][0])

        self.s__bar.showMessage("정상적으로 불러왔습니다.")

    def db_save(self):

        path = self.path_selector()

        f = open(path, "w", encoding = self.encode)

        conn = sq.connect(path)
        cmd = conn.cursor()

        
        
        cmd.execute("")

        f.close()

        self.s__bar.showMessage("정상적으로 저장되었습니다.")

    def sql_open(self):

        path = self.path_selector()
        temp = ""
        
        f = open(path, "r", encoding = self.encode)
        
        for i in f: temp += i

        self.txt__sql.setText(temp)
        
        self.s__bar.showMessage("정상적으로 불러왔습니다.")
        
    def sql_save(self):

        path = self.path_selector()
        self.sql_lines.append(self.txt__sql.text())

        f = open(path, "w", encoding = self.encode)

        for i in self.sql_lines: f.write(i + "\n")

        f.close()

        self.s__bar.showMessage("정상적으로 저장되었습니다.")

    def enter(self):

        try:
            
            line = self.txt__sql.text()
            
            self.sql_lines.append(line)
            self.cmd.execute(line)

            lines = line.lower().split()

            if lines[0] == "select":

                self.table = self.cmd.fetchall()

                self.nrow = len(self.table)
                self.ncol = len(self.table[0])

                self.tbl__view.setRowCount(self.nrow)
                self.tbl__view.setColumnCount(self.ncol)

##                self.cmd.execute(f"select * from PRAGMA_table_info('{line}')")
##                names = self.cmd.fetchall()
##
##                col = [0] * self.ncol
##
##                for i in range(self.ncol): col[i] = str(names[i][1]).upper()
##
##                self.tbl__view.setHorizontalHeaderLabels(col)
##                self.header = col

                for i in range(self.nrow):                
                    for j in range(self.ncol):
                        self.tbl__view.setItem(i, j, QtWidgets.QTableWidgetItem(str(self.table[i][j])))
                        
            else:
                
                self.cmd.fetchall()
                self.load()

            self.txt__sql.setText("")

        except:
            
            ui.s__bar.showMessage("다시 시도해주세요.")

    def retranslateUi(self, MainWindow):
        
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "SQL Interpreter"))
        self.btn__enter.setText(_translate("MainWindow", "ENTER"))
        self.txt__sql.setPlaceholderText(_translate("MainWindow", "SQL INPUT"))
        self.btn__reset.setText(_translate("MainWindow", "RESET"))
        self.m__file.setTitle(_translate("MainWindow", "FILE"))
        self.m__db.setTitle(_translate("MainWindow", "DB"))
        self.m__sql.setTitle(_translate("MainWindow", "SQL"))
        self.m__option.setTitle(_translate("MainWindow", "OPTION"))
        self.db__open.setText(_translate("MainWindow", "DB OPEN"))
        self.db__save.setText(_translate("MainWindow", "DB SAVE"))
        self.sql__open.setText(_translate("MainWindow", "SQL OPEN"))
        self.sql__save.setText(_translate("MainWindow", "SQL SAVE"))
        self.o__utf.setText(_translate("MainWindow", "UTF-8"))
        self.o__ansi.setText(_translate("MainWindow", "ANSI"))


if __name__ == "__main__":

    try:
        import sys
        
        app = QtWidgets.QApplication(sys.argv)
        MainWindow = QtWidgets.QMainWindow()
        ui = Ui_MainWindow()
        ui.setupUi(MainWindow)
        MainWindow.show()
        sys.exit(app.exec_())
        
    except:
        ui.s__bar.showMessage("다시 시도해주세요.")

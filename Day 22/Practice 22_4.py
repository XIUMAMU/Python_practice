# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'P_22_1_UI.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import sqlite3 as sq


class Ui_MainWindow(QtWidgets.QMainWindow):

    encode = "utf-8"
    
    conn = ""
    cmd = ""
    
    sql_lines = []
    table = []

    t_name = ""

    header = []

    nrow = 0
    ncol = 0
    
    def setupUi(self, MainWindow):
        
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1074, 750)
        
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        
        self.tbl__view = QtWidgets.QTableWidget(self.centralwidget)
        self.tbl__view.setGeometry(QtCore.QRect(10, 10, 821, 571))
        font = QtGui.QFont()
        font.setPointSize(15)
        self.tbl__view.setFont(font)
        self.tbl__view.setGridStyle(QtCore.Qt.DotLine)
        self.tbl__view.setObjectName("tbl__view")

        self.lst__view = QtWidgets.QListWidget(self.centralwidget)
        self.lst__view.setGeometry(QtCore.QRect(840, 10, 221, 282))
        self.lst__view.setObjectName("lst__view")

        self.lst__sql = QtWidgets.QListWidget(self.centralwidget)
        self.lst__sql.setGeometry(QtCore.QRect(840, 300, 221, 282))
        self.lst__sql.setObjectName("lst__sql")
        
        self.btn__enter = QtWidgets.QPushButton(self.centralwidget)
        self.btn__enter.setGeometry(QtCore.QRect(940, 590, 121, 51))
        font = QtGui.QFont()
        font.setFamily("맑은 고딕")
        font.setPointSize(12)
        self.btn__enter.setFont(font)
        self.btn__enter.setObjectName("btn__enter")
        
        self.txt__sql = QtWidgets.QTextEdit(self.centralwidget)
        self.txt__sql.setGeometry(QtCore.QRect(10, 590, 921, 111))
        font = QtGui.QFont()
        font.setFamily("맑은 고딕")
        font.setPointSize(15)
        font.setBold(True)
        font.setWeight(75)
        self.txt__sql.setFont(font)
        self.txt__sql.setObjectName("txt__sql")
        
        self.btn__reset = QtWidgets.QPushButton(self.centralwidget)
        self.btn__reset.setGeometry(QtCore.QRect(940, 650, 121, 51))
        font = QtGui.QFont()
        font.setFamily("맑은 고딕")
        font.setPointSize(12)
        self.btn__reset.setFont(font)
        self.btn__reset.setObjectName("btn__reset")
        
        MainWindow.setCentralWidget(self.centralwidget)
        self.m__bar = QtWidgets.QMenuBar(MainWindow)
        self.m__bar.setGeometry(QtCore.QRect(0, 0, 972, 21))
        self.m__bar.setObjectName("m__bar")
        MainWindow.setMenuBar(self.m__bar)
        
        self.m__file = QtWidgets.QMenu(self.m__bar)
        self.m__file.setObjectName("m__file")
        
        self.m__db = QtWidgets.QMenu(self.m__file)
        self.m__db.setObjectName("m__db")
        self.m__sql = QtWidgets.QMenu(self.m__file)
        self.m__sql.setObjectName("m__sql")
        
        self.m__option = QtWidgets.QMenu(self.m__bar)
        self.m__option.setObjectName("m__option")
        

        self.s__bar = QtWidgets.QStatusBar(MainWindow)
        self.s__bar.setObjectName("s__bar")
        MainWindow.setStatusBar(self.s__bar)
        
        self.db__open = QtWidgets.QAction(MainWindow)
        self.db__open.setObjectName("db__open")
        
        self.db__save = QtWidgets.QAction(MainWindow)
        self.db__save.setObjectName("db__save")
        
        self.sql__open = QtWidgets.QAction(MainWindow)
        self.sql__open.setObjectName("sql__open")
        
        self.sql__save = QtWidgets.QAction(MainWindow)
        self.sql__save.setObjectName("sql__save")
        
        self.o__utf = QtWidgets.QAction(MainWindow)
        self.o__utf.setObjectName("o__utf")
        
        self.o__ansi = QtWidgets.QAction(MainWindow)
        self.o__ansi.setObjectName("o__ansi")
        
        self.m__db.addAction(self.db__open)
        self.m__db.addAction(self.db__save)
        self.m__sql.addAction(self.sql__open)
        self.m__sql.addAction(self.sql__save)
        
        self.m__option.addAction(self.o__utf)
        self.m__option.addAction(self.o__ansi)
        
        self.m__file.addAction(self.m__db.menuAction())
        self.m__file.addAction(self.m__sql.menuAction())
        
        self.m__bar.addAction(self.m__file.menuAction())
        self.m__bar.addAction(self.m__option.menuAction())

        self.o__utf.triggered.connect(self.encoding_utf)
        self.o__ansi.triggered.connect(self.encoding_ansi)

        self.btn__enter.clicked.connect(self.enter)

        self.btn__enter.setText("Run (Ctrl+F)")
        self.btn__enter.setShortcut("Ctrl+F")

        self.btn__reset.clicked.connect(self.reset)

        self.lst__view.clicked.connect(self.load)
        self.lst__sql.clicked.connect(self.select)

        self.db__open.triggered.connect(self.db_open)
        self.db__open.setShortcut("Ctrl+O")
        self.db__save.triggered.connect(self.db_save)
        self.db__save.setShortcut("Ctrl+S")

        self.sql__open.triggered.connect(self.sql_open)
        self.sql__open.setShortcut("Shift+O")
        self.sql__save.triggered.connect(self.sql_save)
        self.sql__save.setShortcut("Shift+S")

        self.s__bar.showMessage("READY")

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def load(self):

        self.t_name = self.lst__view.currentItem().text()

        line = f"select * from {self.t_name}"
    
        self.sql_lines.append(line)
        self.cmd.execute(line)
        
        self.table = self.cmd.fetchall()

        self.nrow = len(self.table)
        self.ncol = len(self.table[0])

        self.tbl__view.setRowCount(self.nrow)
        self.tbl__view.setColumnCount(self.ncol)

        self.cmd.execute(f"pragma table_info('{self.t_name}')")
        self.t_info = self.cmd.fetchall()

        self.cmd.execute(line)
        names = self.cmd.description

        col = [0] * self.ncol

        for i in range(self.ncol): col[i] = str(names[i][0]).upper()

        self.tbl__view.setHorizontalHeaderLabels(col)
        self.header = col

        for i in range(self.nrow):                
            for j in range(self.ncol):
                self.tbl__view.setItem(i, j, QtWidgets.QTableWidgetItem(str(self.table[i][j])))

    def select(self):

        temp = self.lst__sql.currentItem().text()
        self.txt__sql.setText(temp)

    def encoding_utf(self):

        self.encode = "utf-8"
        self.o__utf.setChecked(True)
        self.o__ansi.setChecked(False)

        self.s__bar.showMessage("Now Encoding Type => UTF-8")
        
    def encoding_ansi(self):

        self.encode = "cp949"
        self.o__utf.setChecked(False)
        self.o__ansi.setChecked(True)

        self.s__bar.showMessage("Now Encoding Type => ANSI")

    def path_selector(self, exp):

        path = QtWidgets.QFileDialog.getOpenFileName(self, "Select File...", "./", f'{exp};; All File(*)')

        return path[0]

    def save_selector(self, exp):

        path = QtWidgets.QFileDialog.getSaveFileName(self, "Select File...", "./", f'{exp};; All File(*)')

        return path[0]
    
    def db_open(self):

        try:

            self.clear()
            
            path = self.path_selector("Database (*.db);; Exel (*.csv)")

            self.conn = sq.connect(path, isolation_level= None)
            self.cmd = self.conn.cursor()

            self.cmd.execute("SELECT name FROM sqlite_master WHERE type='table'")
            temp = self.cmd.fetchall()

            for i in range(len(temp)):

                if temp[i][0] != 'sqlite_sequence': self.lst__view.addItem(temp[i][0])

            self.s__bar.showMessage("정상적으로 불러왔습니다.")

        except:

            self.s__bar.showMessage("다시 시도해주세요.")

    def db_save(self):

        try:

            path = self.save_selector("Database (*.db);; Exel (*.csv)")
            
            f = open(path, "w", encoding = self.encode)

            if path.split(".")[-1] == "db" :

                f.close()

                con = sq.connect(path, isolation_level = None)
                cmd = con.cursor()

                ex = f"CREATE TABLE {self.t_name} ("

                cnt = 0            

                for i in self.header:

                    n = ""
                    t = ""
                    nn = ""
                    dft = ""
                    pk = ""
        
                    for j in self.t_info:

                        if i == j[1]:

                            n = j[1]
                            t = j[2]

                            if j[3] == 1: nn = "NOT NULL"
                            if j[4] != None: dft = f"DEFAULT {j[4]}"
                            if j[5] == 1: pk = "PRIMARY KEY"

                    ex += f"{n} {t} {nn} {dft} {pk}, "
                    cnt += 1
                    
                ex = ex[ : len(ex)-2] + " )"

                cmd.execute(ex)
                cmd.fetchall()

                ex = "INSERT INTO " + self.t_name + " VALUES ("

                for i in self.table:

                    a = ""
                    a += ex
                    
                    for j in range(cnt):

                        if type(i[j]) == str: a += f'"{i[j]}", '

                        elif type(i[j]) == int: a += (str(i[j]) + ", ")


                    a = a[ : len(a)-2] + ")"

                    cmd.execute(a)
                    cmd.fetchall()

            else:

                header = ""
                
                for i in self.header:

                    header = header + i + ", "

                header = header[ : len(header)-2] + "\n"
                f.write(header)
                
                for i in self.table:

                    temp = ""
                    
                    for j in i: temp = temp + str(j) + ", "

                    temp = temp[ : len(temp)-2] + "\n"
                    f.write(temp)

                f.close()

            self.s__bar.showMessage("정상적으로 저장되었습니다.")

        except:

            self.s__bar.showMessage("다시 시도해주세요.")

    def sql_open(self):

        try:

            self.lst__sql.clear()
            self.txt__sql.clear()
            
            path = self.path_selector("SQL (*.sql);; Text (*.txt)")
            temp = ""
            
            f = open(path, "r", encoding = self.encode)
            
            for i in f:

                self.sql_lines.append(i.split("\n")[0])
                self.lst__sql.addItem(i.split("\n")[0])

            f.close()
            
            self.s__bar.showMessage("정상적으로 불러왔습니다.")

        except:

            self.s__bar.showMessage("다시 시도해주세요.")
        
    def sql_save(self):

        try:

            path = self.save_selector("SQL (*.sql);; Text (*.txt)")
            self.sql_lines.append(self.txt__sql.toPlainText())

            f = open(path, "w", encoding = self.encode)

            for i in self.sql_lines: f.write(i + "\n")

            f.close()

            self.s__bar.showMessage("정상적으로 저장되었습니다.")

        except:

            self.s__bar.showMessage("다시 시도해주세요.")

    def enter(self):

        try:
            
            line = self.txt__sql.toPlainText()
            
            self.sql_lines.append(line)
            self.lst__sql.addItem(line)
            
            self.cmd.execute(line)

            lines = line.lower().split()

            if lines[0] == "select":

                self.table = self.cmd.fetchall()

                self.nrow = len(self.table)
                self.ncol = len(self.table[0])

                self.tbl__view.setRowCount(self.nrow)
                self.tbl__view.setColumnCount(self.ncol)

                self.cmd.execute(f"pragma table_info('{self.t_name}')")
                self.t_info = self.cmd.fetchall()

                self.cmd.execute(line)
                names = self.cmd.description

                col = [0] * self.ncol

                for i in range(self.ncol): col[i] = str(names[i][0]).upper()

                self.tbl__view.setHorizontalHeaderLabels(col)
                self.header = col

                for i in range(self.nrow):                
                    for j in range(self.ncol):
                        self.tbl__view.setItem(i, j, QtWidgets.QTableWidgetItem(str(self.table[i][j])))
                        
            else:
                
                self.cmd.fetchall()
                self.load()

            self.txt__sql.setText("")

        except:
            
            self.s__bar.showMessage("다시 시도해주세요.")

    def clear(self):

        self.lst__view.clear()
        self.lst__sql.clear()
        self.tbl__view.clear()
        self.txt__sql.clear()

        self.sql_lines = []
        self.table = []

        self.t_name = ""

        self.header = []

        self.nrow = 0
        self.ncol = 0

        self.tbl__view.setRowCount(self.nrow)
        self.tbl__view.setColumnCount(self.ncol)

    def reset(self):

        self.clear()

        self.conn = ""
        self.cmd = ""

        self.s__bar.showMessage("READY")

    def retranslateUi(self, MainWindow):
        
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "SQL Interpreter"))
        self.txt__sql.setPlaceholderText(_translate("MainWindow", "SQL INPUT : "))
        self.btn__reset.setText(_translate("MainWindow", "RESET"))
        self.m__file.setTitle(_translate("MainWindow", "FILE"))
        self.m__db.setTitle(_translate("MainWindow", "DB"))
        self.m__sql.setTitle(_translate("MainWindow", "SQL"))
        self.m__option.setTitle(_translate("MainWindow", "OPTION"))
        self.db__open.setText(_translate("MainWindow", "DB OPEN"))
        self.db__save.setText(_translate("MainWindow", "TABLE SAVE"))
        self.sql__open.setText(_translate("MainWindow", "SQL OPEN"))
        self.sql__save.setText(_translate("MainWindow", "SQL SAVE"))
        self.o__utf.setText(_translate("MainWindow", "UTF-8"))
        self.o__ansi.setText(_translate("MainWindow", "ANSI"))


if __name__ == "__main__":

    try:
        import sys
        
        app = QtWidgets.QApplication(sys.argv)
        MainWindow = QtWidgets.QMainWindow()
        ui = Ui_MainWindow()
        ui.setupUi(MainWindow)
        MainWindow.show()
        sys.exit(app.exec_())
        
    except:
        ui.s__bar.showMessage("다시 시도해주세요.")
